{"version":3,"sources":["components/PlanetCard.js","components/Planets.js","components/RenderIf.js","components/Planet.js","App.js","reportWebVitals.js","index.js"],"names":["PlanetCard","name","climate","population","link","Card","variant","CardContent","Typography","gutterBottom","component","color","CardActions","Button","to","pathname","state","Planets","useState","planets","setPlanets","page","setPage","availablePages","setAvailablePages","changePage","n","useEffect","fetch","then","res","json","previous","next","results","LinearProgress","ButtonGroup","disabled","onClick","className","map","planet","url","RenderIf","props","condition","children","Planet","setPlanet","residents","setResidents","useLocation","a","slice","response","residentsLinks","Promise","all","fetchData","Grid","item","xs","rotation_period","diameter","gravity","terrain","length","resident","App","AppBar","position","Toolbar","path","render","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kPAoCeA,EA7BI,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,KAC/C,OACE,eAACC,EAAA,EAAD,CAAMC,QAAQ,WAAd,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACH,QAAQ,KAAKI,UAAU,KAAhD,SACGT,IAEH,cAACO,EAAA,EAAD,CAAYF,QAAQ,QAAQK,MAAM,gBAAgBD,UAAU,IAA5D,4BACeR,KAEf,cAACM,EAAA,EAAD,CAAYF,QAAQ,QAAQK,MAAM,gBAAgBD,UAAU,IAA5D,+BACkBP,QAGpB,cAACS,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQP,QAAQ,YAAhB,SACE,cAAC,IAAD,CACEQ,GAAI,CACFC,SAAS,WAAD,OAAad,GACrBe,MAAO,CAAEZ,KAAMA,IAHnB,gC,gBC6BKa,EA9CC,WAAO,IAAD,EACUC,mBAAS,MADnB,mBACbC,EADa,KACJC,EADI,OAEIF,mBAAS,GAFb,mBAEbG,EAFa,KAEPC,EAFO,OAGwBJ,mBAAS,EAAC,GAAO,IAHzC,mBAGbK,EAHa,KAGGC,EAHH,KAKdC,EAAa,WAAa,IAAZC,EAAW,wDAAN,EACvBJ,EAAQD,EAAOK,IAYjB,OATAC,qBAAU,WACRC,MAAM,uCAAD,OAAwCP,IAC1CQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJN,EAAkB,CAACM,EAAIE,SAAUF,EAAIG,OACrCb,EAAWU,EAAII,cAElB,CAACb,IAGF,iCACIF,GAAW,cAACgB,EAAA,EAAD,CAAgBxB,MAAM,cACnC,eAACyB,EAAA,EAAD,CAAazB,MAAM,UAAnB,UACE,cAACE,EAAA,EAAD,CAAQwB,UAAWd,EAAe,GAAIe,QAAS,kBAAMb,KAArD,2BAGA,cAACZ,EAAA,EAAD,CAAQwB,UAAWd,EAAe,GAAIe,QAAS,kBAAMb,EAAW,IAAhE,0BAIF,qBAAKc,UAAU,aAAf,gBACGpB,QADH,IACGA,OADH,EACGA,EAASqB,KAAI,SAAAC,GACZ,OACE,cAAC,EAAD,CAEExC,KAAMwC,EAAOxC,KACbC,QAASuC,EAAOvC,QAChBC,WAAYsC,EAAOtC,WACnBC,KAAMqC,EAAOC,KAJRD,EAAOxC,e,yBChCX0C,EAPE,SAAAC,GACf,OAAIA,EAAMC,UACDD,EAAME,SAER,M,QCsEMC,EAjEA,WAAO,IAAD,EACS7B,mBAAS,MADlB,mBACZuB,EADY,KACJO,EADI,OAEe9B,mBAAS,MAFxB,mBAEZ+B,EAFY,KAEDC,EAFC,KAIb9C,EAAO+C,cAAcnC,MAAMZ,MAAQ,kCAqBzC,OAnBAuB,qBAAU,WAAM,4CACd,4BAAAyB,EAAA,sEAC6BxB,MAAMxB,EAAKiD,MAAM,IACzCxB,MAAK,SAAAyB,GAAQ,OAAIA,EAASvB,UAC1BF,MAAK,SAAAC,GAEJ,OADAkB,EAAUlB,GACHA,EAAImB,aALjB,cACMM,EADN,YAOEL,EAPF,SAQUM,QAAQC,IACZF,EAAef,KAAI,SAAApC,GACjB,OAAOwB,MAAMxB,EAAKiD,MAAM,IAAIxB,MAAK,SAAAyB,GAAQ,OAAIA,EAASvB,cAV9D,8EADc,uBAAC,WAAD,wBAgBd2B,KACC,CAACtD,IAGF,qCACE,cAAC,EAAD,CAAUyC,UAAWI,EAArB,SACE,sBAAKV,UAAU,eAAf,UACE,cAACoB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAACxD,EAAA,EAAD,CAAMC,QAAQ,WAAd,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACH,QAAQ,KAAKI,UAAU,KAAhD,2CACuB+B,QADvB,IACuBA,OADvB,EACuBA,EAAQxC,KAD/B,OAGA,8DAAwBwC,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAQqB,mBAChC,uDAAiBrB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAQsB,YACzB,sDAAgBtB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAQvC,WACxB,sDAAgBuC,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAQuB,WACxB,sDAAgBvB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAQwB,WACxB,yDAAmBxB,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAQtC,qBAIjC,cAACE,EAAA,EAAD,CAAMC,QAAQ,WAAd,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACH,QAAQ,KAAKI,UAAU,KAAhD,UACY,OAATuC,QAAS,IAATA,OAAA,EAAAA,EAAWiB,QAAX,qCAC0BzB,QAD1B,IAC0BA,OAD1B,EAC0BA,EAAQxC,KADlC,4DAE4CwC,QAF5C,IAE4CA,OAF5C,EAE4CA,EAAQxC,KAFpD,OAFL,OAMGgD,QANH,IAMGA,OANH,EAMGA,EAAWT,KAAI,SAAA2B,GACd,OAAO,4BAAwBA,EAASlE,MAAzBkE,EAASlE,mBAMlC,cAAC,EAAD,CAAU4C,WAAYI,EAAtB,SACE,cAACd,EAAA,EAAD,CAAgBxB,MAAM,oB,gBCtCfyD,MArBf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC8B,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAAMhC,UAAU,cAAczB,GAAG,IAAjC,SACE,cAACN,EAAA,EAAD,CAAYF,QAAQ,KAApB,wBAIN,cAAC,IAAD,CAAOkE,KAAK,WAAWC,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,IAAD,CAAOD,KAAK,eAAeC,OAAQ,kBAAM,cAAC,EAAD,OACzC,cAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAlB,SACE,cAAC,IAAD,CAAU1D,GAAG,qBCXR6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BX,M","file":"static/js/main.fd64a96a.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst PlanetCard = ({ name, climate, population, link }) => {\r\n  return (\r\n    <Card variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          {name}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {`climate: ${climate}`}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {`population: ${population}`}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button variant=\"contained\">\r\n          <Link\r\n            to={{\r\n              pathname: `/planet/${name}`,\r\n              state: { link: link },\r\n            }}>\r\n            Learn More\r\n          </Link>\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PlanetCard;\r\n","import { useState, useEffect } from 'react';\r\nimport PlanetCard from './PlanetCard';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nconst Planets = () => {\r\n  const [planets, setPlanets] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [availablePages, setAvailablePages] = useState([false, false]);\r\n\r\n  const changePage = (n = -1) => {\r\n    setPage(page + n);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(`https://swapi.dev/api/planets/?page=${page}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setAvailablePages([res.previous, res.next]);\r\n        setPlanets(res.results);\r\n      });\r\n  }, [page]);\r\n\r\n  return (\r\n    <div>\r\n      {!planets && <LinearProgress color=\"secondary\" />}\r\n      <ButtonGroup color=\"primary\">\r\n        <Button disabled={!availablePages[0]} onClick={() => changePage()}>\r\n          Previous Page\r\n        </Button>\r\n        <Button disabled={!availablePages[1]} onClick={() => changePage(1)}>\r\n          Next Page\r\n        </Button>\r\n      </ButtonGroup>\r\n      <div className=\"main__grid\">\r\n        {planets?.map(planet => {\r\n          return (\r\n            <PlanetCard\r\n              key={planet.name}\r\n              name={planet.name}\r\n              climate={planet.climate}\r\n              population={planet.population}\r\n              link={planet.url}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planets;\r\n","const RenderIf = props => {\r\n  if (props.condition) {\r\n    return props.children;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default RenderIf;\r\n","import { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport RenderIf from './RenderIf';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst Planet = () => {\r\n  const [planet, setPlanet] = useState(null);\r\n  const [residents, setResidents] = useState(null);\r\n\r\n  const link = useLocation().state.link || 'http://swapi.dev/api/planets/1/';\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let residentsLinks = await fetch(link.slice(7))\r\n        .then(response => response.json())\r\n        .then(res => {\r\n          setPlanet(res);\r\n          return res.residents;\r\n        });\r\n      setResidents(\r\n        await Promise.all(\r\n          residentsLinks.map(link => {\r\n            return fetch(link.slice(7)).then(response => response.json());\r\n          }),\r\n        ),\r\n      );\r\n    }\r\n    fetchData();\r\n  }, [link]);\r\n\r\n  return (\r\n    <>\r\n      <RenderIf condition={residents}>\r\n        <div className=\"planet__grid\">\r\n          <Grid item xs={12}>\r\n            <Card variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {`Short info about ${planet?.name}:`}\r\n                </Typography>\r\n                <p>{`Rotation period: ${planet?.rotation_period}`}</p>\r\n                <p>{`Diameter: ${planet?.diameter}`}</p>\r\n                <p>{`Climate: ${planet?.climate}`}</p>\r\n                <p>{`Gravity: ${planet?.gravity}`}</p>\r\n                <p>{`Terrain: ${planet?.terrain}`}</p>\r\n                <p>{`Population: ${planet?.population}`}</p>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {residents?.length\r\n                  ? `Famous Residents of ${planet?.name}:`\r\n                  : `There are not any famous residents of ${planet?.name}.`}\r\n              </Typography>\r\n              {residents?.map(resident => {\r\n                return <p key={resident.name}>{resident.name}</p>;\r\n              })}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </RenderIf>\r\n      <RenderIf condition={!residents}>\r\n        <LinearProgress color=\"secondary\" />\r\n      </RenderIf>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n","import './app.css';\r\nimport { HashRouter as Router, Route, Redirect, Link } from 'react-router-dom';\r\nimport Planets from './components/Planets';\r\nimport Planet from './components/Planet';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Link className=\"header-link\" to=\"/\">\r\n              <Typography variant=\"h6\">Home</Typography>\r\n            </Link>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Route path=\"/planets\" render={() => <Planets />} />\r\n        <Route path=\"/planet/:id?\" render={() => <Planet />} />\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/planets\" />\r\n        </Route>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}